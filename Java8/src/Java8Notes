Java 8
From Imperative to Functional and declarative style of programming.

Imperative  - We tell what and how to do - step by step

Functional - is declarative - We tell what to do but not how to do
	- We let the underlying libraries to take care of what to do
	- Work with higher order functions - pass function to function
	- Return function from function
	- We create function from  function
	- We can focus more on getting our work done 
	- Function composition

Honoring Immutability - 
Pure function - function's with no side effect
	When u call a function it produces an output only depending on the input
	
Why Functional wayâ€¦??
	- Concise - easy to see and understand
	- Code becomes more expressive
	- Less code - fewer lines of code
	- Easy to modify
	- Fewer bugs
	- Effortless to parallelize and make it efficient.

	- Functional Interfaces
	- Single Abstract Method Interfaces
	- IntStream.range(0,10) - method given in Java 8

Streams:

- Streams are extreamly lazy evaluation until actually needed
- Stream Operations:
    eg:: filter, reduce, map, findfirst, order by, reverse, limit, sorted

----------------------------------

Execute Around Method Pattern:

//**lamdas will not generate any anonymmous classes
//**invokedynamic will be used instead - since it has right method signature

//Using Java8 Method References
//Used only in office space pattern - jus pass it through without any alteration

Java8DefaultInterface:
----------------------
FastFly.super.cruise();//If we call with super then it refers to default methods
        //If called directly it will check for static method in interface

//Default Methods Rules
//
// 1. Defult methods gets ingerited automatically
// 2. We can override default methods, if not found checks for hierarchy and gets it
// 3. Methods in class hierarchy rule
// 4. If there is a collision between the methods

//--Abstract Class vs Interface
//Abstract class can have state but INterfacs do not have state
//We can have fields in Abstract class but not in Interfaces
//We cannot inherit from more than one abstract class whereas with interface we can implement many

